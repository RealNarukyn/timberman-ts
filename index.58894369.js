class t{constructor(t){this.canvasSize=t,this.pointsWidth=t.width/5;const i=(t=>{const i=[];let s=0;for(let e=0;e<5;e++){const e=s+t;i.push({start:s,end:e}),s+=t}return i})(this.pointsWidth);this.points=i}}let i;class s{constructor(t){this.players=t}update(){this.players.forEach((t=>{t.timberman.facing===t.tree.woodenLogs[0].branchFacing&&console.log("cositas")}))}}let e;var h,o;(o=h||(h={}))[o.LEFT=0]="LEFT",o[o.RIGHT=1]="RIGHT";var n=class{update(){}draw(t){}handleInputDOWN(t){}};var a=class extends n{constructor(t,s){super(),this.tmSize={width:100,height:100},this.positions=((t,s)=>{let e=i.points[1].start+i.pointsWidth/2;const h={x:e-s.width/2,y:t.height-150};return e=i.points[3].start+i.pointsWidth/2,[h,{x:e-s.width/2,y:t.height-150}]})(t,this.tmSize),this.facing=h.RIGHT,this.keyboardMap=s}draw(t){t.save(),t.fillStyle="red";const i=this.facing===h.LEFT?this.positions[0]:this.positions[1];t.fillRect(i.x,i.y,this.tmSize.width,this.tmSize.height),t.restore()}handleInputDOWN(t){const i=this.keyboardMap[t];i===h.LEFT&&(this.facing=h.LEFT),i===h.RIGHT&&(this.facing=h.RIGHT)}};const r={ArrowLeft:h.LEFT,ArrowRight:h.RIGHT};h.LEFT,h.LEFT,h.RIGHT,h.RIGHT;var c=class{constructor(t,i,s=!1){if(this.position=t,this.wlSize=i,s)this.branchFacing=h.LEFT;else{const t=Math.floor(2*Math.random())+1;this.branchFacing=1===t?h.LEFT:h.RIGHT}this.branchSize={width:100,height:30}}draw(t){t.save(),t.fillStyle="blue",t.fillRect(this.position.x,this.position.y,this.wlSize.width,this.wlSize.height),t.restore(),t.save(),t.fillStyle="green";const i=this.branchFacing===h.LEFT?this.position.x-this.branchSize.width:this.position.x+this.branchSize.width;t.fillRect(i,this.position.y,this.branchSize.width,this.branchSize.height),t.restore()}};var d=class extends n{constructor(t,s,e=10){super(),this.woodenLogs=((t,s=10)=>{const e=[];for(let h=0;h<s;h++){const s={width:100,height:100},o={x:i.points[2].start+i.pointsWidth/2-s.width/2,y:t.height-150-105*h};e.push(new c(o,s,0===h))}return e})(t,e),this.keyboardMap=s}draw(t){this.woodenLogs.forEach((i=>i.draw(t)))}handleInputDOWN(t){const s=this.keyboardMap[t];if(s===h.LEFT||s===h.RIGHT){this.woodenLogs.shift(),this.woodenLogs.forEach((t=>{t.position.y+=t.wlSize.height+5}));const t={width:100,height:100},s={x:i.points[2].start+i.pointsWidth/2-t.width/2,y:i.canvasSize.height-150-945};this.woodenLogs.push(new c(s,t))}}};window.onload=()=>{const h=document.getElementById("canvas-game"),o=h.getContext("2d"),n={width:h.width,height:h.height};((s={width:800,height:900})=>{i=new t(s)})(n);const c=new a(n,r),w=new d(n,r,10),l=[c,w];(t=>{e=new s(t)})([{timberman:c,tree:w,keyboardMap:r}]);let p=0;const g=t=>{p=t,o.clearRect(0,0,h.width,h.height),l.forEach((t=>t.draw(o))),e.update(),window.requestAnimationFrame(g)};window.requestAnimationFrame(g),document.body.addEventListener("keydown",(t=>{l.forEach((i=>i.handleInputDOWN(t.key)))}))};
//# sourceMappingURL=index.58894369.js.map
