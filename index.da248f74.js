class t{constructor(t){this.canvasSize=t,this.pointsWidth=t.width/5;const i=(t=>{const i=[];let s=0;for(let h=0;h<5;h++){const h=s+t;i.push({start:s,end:h}),s+=t}return i})(this.pointsWidth);this.points=i}}let i;class s{constructor(t){this.isPlaying=!0,this.players=t}update(){this.players.forEach((t=>{t.timberman.health<=0&&(this.isPlaying=!1,t.timberman.health=0),t.timberman.facing===t.tree.woodenLogs[0].branchFacing&&(this.isPlaying=!1)}))}}let h;var e,n;(n=e||(e={}))[n.LEFT=0]="LEFT",n[n.RIGHT=1]="RIGHT",n[n.NONE=2]="NONE";var o=class{update(t){}draw(t,i){}handleInputDOWN(t){}};var a=class extends o{constructor(t,s){super(),this.tmSize={width:100,height:100},this.positions=((t,s)=>{let h=i.points[1].start+i.pointsWidth/2;const e={x:h-s.width/2,y:t.height-150};return h=i.points[3].start+i.pointsWidth/2,[e,{x:h-s.width/2,y:t.height-150}]})(t,this.tmSize),this.facing=e.RIGHT,this.keyboardMap=s,this.health=100}update(t){this.health>100&&(this.health=100),this.health<0&&(this.health=0),this.health-=16*t}draw(t){t.save(),t.fillStyle="red";const i=this.facing===e.LEFT?this.positions[0]:this.positions[1];t.fillRect(i.x,i.y,this.tmSize.width,this.tmSize.height),t.restore(),t.save(),t.fillStyle="orange",t.fillRect(i.x,i.y-30,this.health,20),t.restore()}handleInputDOWN(t){const i=this.keyboardMap[t];i===e.LEFT&&(this.facing=e.LEFT,this.health+=12*.2),i===e.RIGHT&&(this.facing=e.RIGHT,this.health+=12*.2)}};const r={ArrowLeft:e.LEFT,ArrowRight:e.RIGHT};e.LEFT,e.LEFT,e.RIGHT,e.RIGHT;var l=class{constructor(t,i,s=!1){if(this.position=t,this.wlSize=i,s)this.branchFacing=e.LEFT;else{const t=Math.floor(3*Math.random())+1;this.branchFacing=1===t?e.LEFT:2===t?e.RIGHT:e.NONE}this.branchSize={width:100,height:30}}draw(t){if(t.save(),t.fillStyle="blue",t.fillRect(this.position.x,this.position.y,this.wlSize.width,this.wlSize.height),t.restore(),this.branchFacing!==e.NONE){t.save(),t.fillStyle="green";const i=this.branchFacing===e.LEFT?this.position.x-this.branchSize.width:this.position.x+this.branchSize.width;t.fillRect(i,this.position.y,this.branchSize.width,this.branchSize.height),t.restore()}}};var c=class extends o{constructor(t,s,h=10){super(),this.woodenLogs=((t,s=10)=>{const h=[];for(let e=0;e<s;e++){const s={width:100,height:100},n={x:i.points[2].start+i.pointsWidth/2-s.width/2,y:t.height-150-105*e};h.push(new l(n,s,0===e))}return h})(t,h),this.keyboardMap=s}draw(t){this.woodenLogs.forEach((i=>i.draw(t)))}handleInputDOWN(t){const s=this.keyboardMap[t];if(s===e.LEFT||s===e.RIGHT){this.woodenLogs.shift(),this.woodenLogs.forEach((t=>{t.position.y+=t.wlSize.height+5}));const t={width:100,height:100},s={x:i.points[2].start+i.pointsWidth/2-t.width/2,y:i.canvasSize.height-150-945};this.woodenLogs.push(new l(s,t))}}};var d=class extends o{constructor(t){super(),this.position=t}draw(t,i){const s=(1/i).toFixed(2);t.font="15px Arial",t.fillStyle="black",t.fillText(`FPS:${s}`,this.position.x,this.position.y)}};window.onload=()=>{const e=document.getElementById("canvas-game"),n=e.getContext("2d"),o={width:e.width,height:e.height};((s={width:800,height:900})=>{i=new t(s)})(o);const l=new d({x:50,y:50}),w=new a(o,r),p=new c(o,r,10),g=[l,w,p];(t=>{h=new s(t)})([{timberman:w,tree:p,keyboardMap:r}]);let y=0;const f=t=>{const i=(t-y)/1e3;y=t,n.clearRect(0,0,e.width,e.height),h.isPlaying?(g.forEach((t=>{t.draw(n,i),t.update(i)})),h.update()):(n.font="15px Arial",n.fillStyle="black",n.fillText("Game Over...",o.width/2-25,o.height/2-25)),window.requestAnimationFrame(f)};window.requestAnimationFrame(f),document.body.addEventListener("keydown",(t=>{h.isPlaying&&g.forEach((i=>i.handleInputDOWN(t.key)))}))};
//# sourceMappingURL=index.da248f74.js.map
