{"mappings":"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","sources":["src/managers/MapManager.ts","src/types/positions.ts","src/actors/actor.ts","src/actors/timberman.ts","src/utils/keyboard-map.ts","src/actors/wooden-log.ts","src/actors/tree.ts","src/index.ts"],"sourcesContent":["import { Size } from '../types/sizes';\n\nconst getPointsArray = (\n  pointsWidth: number\n): Array<{ start: number; end: number }> => {\n  const pointsHelper: Array<{ start: number; end: number }> = [];\n  let start: number = 0;\n\n  for (let i = 0; i < 5; i++) {\n    const end = start + pointsWidth;\n    pointsHelper.push({ start, end });\n    start += pointsWidth;\n  }\n\n  return pointsHelper;\n};\n\nclass MapManager {\n  canvasSize: Size;\n\n  pointsWidth: number;\n\n  points: Array<{ start: number; end: number }>;\n\n  constructor(canvasSize: Size) {\n    this.canvasSize = canvasSize;\n    this.pointsWidth = canvasSize.width / 5;\n    const pointsHelper: Array<{ start: number; end: number }> = getPointsArray(\n      this.pointsWidth\n    );\n    this.points = pointsHelper;\n  }\n}\n\n// eslint-disable-next-line import/no-mutable-exports\nexport let mapManager: MapManager;\n\nexport const initMapManager = (\n  canvasSize: Size = { width: 800, height: 900 }\n) => {\n  mapManager = new MapManager(canvasSize);\n};\n","export interface Position {\n  x: number;\n  y: number;\n}\n\nexport enum facingENUM {\n  // eslint-disable-next-line no-unused-vars\n  LEFT,\n  // eslint-disable-next-line no-unused-vars\n  RIGHT\n}\n","/* eslint-disable no-unused-vars */\n/* eslint-disable class-methods-use-this */\n\nclass Actor {\n  update(): void {}\n\n  draw(ctx: CanvasRenderingContext2D): void {}\n\n  handleInputDOWN(key: string): void {}\n}\n\nexport default Actor;\n","import { mapManager } from '../managers/MapManager';\nimport { Position, facingENUM } from '../types/positions';\nimport { Size } from '../types/sizes';\nimport { KeyboardMap } from '../utils/keyboard-map';\nimport Actor from './actor';\n\nconst createPositionsTM = (canvas: Size, tmSize: Size): Array<Position> => {\n  // -- Left Point\n  let middlePosPoint = mapManager.points[1].start + mapManager.pointsWidth / 2;\n  const tmPosLeft: Position = {\n    x: middlePosPoint - tmSize.width / 2,\n    y: canvas.height - 150\n  };\n\n  // -- Right Point\n  middlePosPoint = mapManager.points[3].start + mapManager.pointsWidth / 2;\n  const tmPosRight: Position = {\n    x: middlePosPoint - tmSize.width / 2,\n    y: canvas.height - 150\n  };\n\n  return [tmPosLeft, tmPosRight];\n};\n\nclass Timberman extends Actor {\n  tmSize: Size;\n\n  positions: Array<Position>;\n\n  facing: facingENUM;\n\n  keyboardMap: KeyboardMap;\n\n  constructor(canvasSize: Size, keyboardMap: KeyboardMap) {\n    super();\n\n    this.tmSize = { width: 100, height: 100 };\n\n    this.positions = createPositionsTM(canvasSize, this.tmSize);\n\n    this.facing = facingENUM.RIGHT;\n\n    this.keyboardMap = keyboardMap;\n  }\n\n  // update() {}\n\n  draw(ctx: CanvasRenderingContext2D) {\n    ctx.save();\n\n    ctx.fillStyle = 'red';\n\n    const curPosition: Position =\n      this.facing === facingENUM.LEFT ? this.positions[0] : this.positions[1];\n\n    ctx.fillRect(\n      curPosition.x,\n      curPosition.y,\n      this.tmSize.width,\n      this.tmSize.height\n    );\n\n    ctx.restore();\n  }\n\n  handleInputDOWN(key: string) {\n    const input = this.keyboardMap[key];\n\n    if (input === facingENUM.LEFT) this.facing = facingENUM.LEFT;\n    if (input === facingENUM.RIGHT) this.facing = facingENUM.RIGHT;\n  }\n}\n\nexport default Timberman;\n","import { facingENUM } from '../types/positions';\n\nexport interface KeyboardMap {\n  [key: string]: facingENUM;\n}\n\nexport const mapA: KeyboardMap = {\n  ArrowLeft: facingENUM.LEFT,\n  ArrowRight: facingENUM.RIGHT\n};\n\nexport const mapB: KeyboardMap = {\n  a: facingENUM.LEFT,\n  A: facingENUM.LEFT,\n  d: facingENUM.RIGHT,\n  D: facingENUM.RIGHT\n};\n","import { Position, facingENUM } from '../types/positions';\nimport { Size } from '../types/sizes';\n\nclass WoodenLog {\n  position: Position;\n\n  branch: facingENUM;\n\n  wlSize: Size;\n\n  branchSize: Size;\n\n  constructor(position: Position, wlSize: Size, firstLog: boolean = false) {\n    this.position = position;\n    this.wlSize = wlSize;\n\n    if (firstLog) {\n      this.branch = facingENUM.LEFT;\n    } else {\n      const rand = Math.floor(Math.random() * 2) + 1;\n      this.branch = rand === 1 ? facingENUM.LEFT : facingENUM.RIGHT;\n    }\n    this.branchSize = { width: 100, height: 30 };\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    // -- Render Wooden Log\n    ctx.save();\n    ctx.fillStyle = 'blue';\n    ctx.fillRect(\n      this.position.x,\n      this.position.y,\n      this.wlSize.width,\n      this.wlSize.height\n    );\n    ctx.restore();\n\n    // -- Render Branch\n    ctx.save();\n    ctx.fillStyle = 'green';\n    const branchPos: number =\n      this.branch === facingENUM.LEFT\n        ? this.position.x - this.branchSize.width\n        : this.position.x + this.branchSize.width;\n    ctx.fillRect(\n      branchPos,\n      this.position.y,\n      this.branchSize.width,\n      this.branchSize.height\n    );\n    ctx.restore();\n  }\n}\n\nexport default WoodenLog;\n","import { mapManager } from '../managers/MapManager';\nimport { facingENUM, Position } from '../types/positions';\nimport { Size } from '../types/sizes';\nimport { KeyboardMap } from '../utils/keyboard-map';\nimport Actor from './actor';\nimport WoodenLog from './wooden-log';\n\nconst createWoodenLogs = (\n  canvas: Size,\n  numLogs: number = 10\n): Array<WoodenLog> => {\n  const tree: Array<WoodenLog> = [];\n\n  for (let i = 0; i < numLogs; i++) {\n    const wlSize: Size = { width: 100, height: 100 };\n\n    const middlePosPoint =\n      mapManager.points[2].start + mapManager.pointsWidth / 2;\n\n    const wlPos: Position = {\n      x: middlePosPoint - wlSize.width / 2,\n      y: canvas.height - 150 - i * 105\n    };\n\n    tree.push(new WoodenLog(wlPos, wlSize, i === 0));\n  }\n\n  return tree;\n};\n\nclass Tree extends Actor {\n  woodenLogs: Array<WoodenLog>;\n\n  keyboardMap: KeyboardMap;\n\n  constructor(canvas: Size, keyboardMap: KeyboardMap, numLogs: number = 10) {\n    super();\n    this.woodenLogs = createWoodenLogs(canvas, numLogs);\n    this.keyboardMap = keyboardMap;\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    this.woodenLogs.forEach((e) => e.draw(ctx));\n  }\n\n  handleInputDOWN(key: string) {\n    const input = this.keyboardMap[key];\n\n    if (input === facingENUM.LEFT || input === facingENUM.RIGHT) {\n      // -- Remove First Element\n      this.woodenLogs.shift();\n\n      // -- Move all the [ Wooden Log ] Positions\n      this.woodenLogs.forEach((wl) => {\n        wl.position.y += wl.wlSize.height + 5;\n      });\n\n      // -- Add new [ Wooden Log ] to the tree at the last position\n      const wlSize: Size = { width: 100, height: 100 };\n\n      const middlePosPoint =\n        mapManager.points[2].start + mapManager.pointsWidth / 2;\n\n      const wlPos: Position = {\n        x: middlePosPoint - wlSize.width / 2,\n        y: mapManager.canvasSize.height - 150 - 9 * 105\n      };\n\n      this.woodenLogs.push(new WoodenLog(wlPos, wlSize));\n    }\n  }\n}\n\nexport default Tree;\n","import { mapManager, initMapManager } from './managers/MapManager';\nimport Timberman from './actors/timberman';\nimport { mapA } from './utils/keyboard-map';\nimport Tree from './actors/tree';\nimport { Size } from './types/sizes';\nimport Actor from './actors/actor';\n\nwindow.onload = () => {\n  const canvas = document.getElementById('canvas-game') as HTMLCanvasElement;\n  const ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n  const canvasSize: Size = { width: canvas.width, height: canvas.height };\n\n  // #region [ Init Managers ]\n  initMapManager(canvasSize);\n  // #endregion\n\n  // #region [ Init Actors ]\n\n  // -- Timberman\n  const timberman: Timberman = new Timberman(canvasSize, mapA);\n\n  // -- Wooden Tree\n  const tree: Tree = new Tree(canvasSize, mapA, 10);\n  // #endregion\n\n  const actors: Array<Actor> = [timberman, tree];\n\n  // -- Render Loop\n  let lastFrame = 0;\n  const render = (time: number): void => {\n    // -- Get Delta\n    const delta = (time - lastFrame) / 1000;\n    lastFrame = time;\n    console.log(delta);\n\n    // -- Clear the canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    mapManager.points.forEach((point) => {\n      ctx.save();\n\n      ctx.fillStyle = 'red';\n\n      ctx.fillRect(\n        point.start,\n        canvas.height / 2,\n        point.end - point.start - 1,\n        100\n      );\n\n      ctx.restore();\n    });\n\n    // -- Draw Section\n    actors.forEach((actor) => actor.draw(ctx));\n\n    // -- Recurisve\n    window.requestAnimationFrame(render);\n  };\n\n  // -- Start the game\n  window.requestAnimationFrame(render);\n\n  // -- Add Event Listeners\n  document.body.addEventListener('keydown', (event) => {\n    actors.forEach((actor) => actor.handleInputDOWN(event.key));\n  });\n};\n"],"names":["$b76e4b56ecbb8faf$var$MapManager","canvasSize1","this","canvasSize","pointsWidth","width","pointsHelper","start","i","end","push","$b76e4b56ecbb8faf$var$getPointsArray","points","$b76e4b56ecbb8faf$export$fef8b6f15112b2ca","facingENUM","$a6845bf1f59e284a$export$7ce44a5e993f42ea","$8295367afc31fb99$export$2e2bcd8739ae039","update","draw","ctx","handleInputDOWN","key","$a44f627d4b2cbe0c$export$2e2bcd8739ae039","keyboardMap","super","tmSize","height","positions","canvas","middlePosPoint","tmPosLeft","x","y","$a44f627d4b2cbe0c$var$createPositionsTM","facing","RIGHT","save","fillStyle","curPosition","LEFT","fillRect","restore","input","$6f5fc56be7ebde6b$export$b876a215b1634849","ArrowLeft","ArrowRight","$7d3dd20e715e85d2$export$2e2bcd8739ae039","position","wlSize","firstLog","branch","rand","Math","floor","random","branchSize","branchPos","$087d283f4c0f1d3f$export$2e2bcd8739ae039","numLogs","woodenLogs","tree","wlPos","$087d283f4c0f1d3f$var$createWoodenLogs","forEach","e","shift","wl","window","onload","document","getElementById","getContext","$b76e4b56ecbb8faf$export$5b9231e05761732a","actors","lastFrame","render","time","delta","console","log","clearRect","point","actor","requestAnimationFrame","body","addEventListener","event"],"version":3,"file":"index.09740d50.js.map"}