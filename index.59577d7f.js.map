{"mappings":"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","sources":["src/managers/MapManager.ts","src/managers/GameManager.ts","src/types/positions.ts","src/actors/Actor.ts","src/actors/Timberman.ts","src/utils/keyboard-map.ts","src/actors/WoodenLog.ts","src/actors/Tree.ts","src/index.ts"],"sourcesContent":["import { Size } from '../types/sizes';\n\nconst getPointsArray = (\n  pointsWidth: number\n): Array<{ start: number; end: number }> => {\n  const pointsHelper: Array<{ start: number; end: number }> = [];\n  let start: number = 0;\n\n  for (let i = 0; i < 5; i++) {\n    const end = start + pointsWidth;\n    pointsHelper.push({ start, end });\n    start += pointsWidth;\n  }\n\n  return pointsHelper;\n};\n\nclass MapManager {\n  canvasSize: Size;\n\n  pointsWidth: number;\n\n  points: Array<{ start: number; end: number }>;\n\n  constructor(canvasSize: Size) {\n    this.canvasSize = canvasSize;\n    this.pointsWidth = canvasSize.width / 5;\n    const pointsHelper: Array<{ start: number; end: number }> = getPointsArray(\n      this.pointsWidth\n    );\n    this.points = pointsHelper;\n  }\n}\n\n// eslint-disable-next-line import/no-mutable-exports\nexport let mapManager: MapManager;\n\nexport const initMapManager = (\n  canvasSize: Size = { width: 800, height: 900 }\n) => {\n  mapManager = new MapManager(canvasSize);\n};\n","import { Player } from '../types/player';\n\nclass GameManager {\n  isPlaying: boolean;\n\n  players: Array<Player>;\n\n  constructor(players: Array<Player>) {\n    this.isPlaying = true;\n    this.players = players;\n  }\n\n  update() {\n    this.players.forEach((player: Player) => {\n      if (player.timberman.facing === player.tree.woodenLogs[0].branchFacing) {\n        this.isPlaying = false;\n      }\n    });\n  }\n}\n\n// eslint-disable-next-line import/no-mutable-exports\nexport let gameManager: GameManager;\n\nexport const initGameManager = (players: Array<Player>) => {\n  gameManager = new GameManager(players);\n};\n","export interface Position {\n  x: number;\n  y: number;\n}\n\nexport enum facingENUM {\n  // eslint-disable-next-line no-unused-vars\n  LEFT,\n  // eslint-disable-next-line no-unused-vars\n  RIGHT\n}\n","/* eslint-disable no-unused-vars */\n/* eslint-disable class-methods-use-this */\n\nclass Actor {\n  update(): void {}\n\n  draw(ctx: CanvasRenderingContext2D): void {}\n\n  handleInputDOWN(key: string): void {}\n}\n\nexport default Actor;\n","import { mapManager } from '../managers/MapManager';\nimport { Position, facingENUM } from '../types/positions';\nimport { Size } from '../types/sizes';\nimport { KeyboardMap } from '../utils/keyboard-map';\nimport Actor from './Actor';\n\nconst createPositionsTM = (canvas: Size, tmSize: Size): Array<Position> => {\n  // -- Left Point\n  let middlePosPoint = mapManager.points[1].start + mapManager.pointsWidth / 2;\n  const tmPosLeft: Position = {\n    x: middlePosPoint - tmSize.width / 2,\n    y: canvas.height - 150\n  };\n\n  // -- Right Point\n  middlePosPoint = mapManager.points[3].start + mapManager.pointsWidth / 2;\n  const tmPosRight: Position = {\n    x: middlePosPoint - tmSize.width / 2,\n    y: canvas.height - 150\n  };\n\n  return [tmPosLeft, tmPosRight];\n};\n\nclass Timberman extends Actor {\n  tmSize: Size;\n\n  positions: Array<Position>;\n\n  facing: facingENUM;\n\n  keyboardMap: KeyboardMap;\n\n  constructor(canvasSize: Size, keyboardMap: KeyboardMap) {\n    super();\n\n    this.tmSize = { width: 100, height: 100 };\n\n    this.positions = createPositionsTM(canvasSize, this.tmSize);\n\n    this.facing = facingENUM.RIGHT;\n\n    this.keyboardMap = keyboardMap;\n  }\n\n  // update() {}\n\n  draw(ctx: CanvasRenderingContext2D) {\n    ctx.save();\n\n    ctx.fillStyle = 'red';\n\n    const curPosition: Position =\n      this.facing === facingENUM.LEFT ? this.positions[0] : this.positions[1];\n\n    ctx.fillRect(\n      curPosition.x,\n      curPosition.y,\n      this.tmSize.width,\n      this.tmSize.height\n    );\n\n    ctx.restore();\n  }\n\n  handleInputDOWN(key: string) {\n    const input = this.keyboardMap[key];\n\n    if (input === facingENUM.LEFT) this.facing = facingENUM.LEFT;\n    if (input === facingENUM.RIGHT) this.facing = facingENUM.RIGHT;\n  }\n}\n\nexport default Timberman;\n","import { facingENUM } from '../types/positions';\n\nexport interface KeyboardMap {\n  [key: string]: facingENUM;\n}\n\nexport const mapA: KeyboardMap = {\n  ArrowLeft: facingENUM.LEFT,\n  ArrowRight: facingENUM.RIGHT\n};\n\nexport const mapB: KeyboardMap = {\n  a: facingENUM.LEFT,\n  A: facingENUM.LEFT,\n  d: facingENUM.RIGHT,\n  D: facingENUM.RIGHT\n};\n","import { Position, facingENUM } from '../types/positions';\nimport { Size } from '../types/sizes';\n\nclass WoodenLog {\n  position: Position;\n\n  branchFacing: facingENUM;\n\n  wlSize: Size;\n\n  branchSize: Size;\n\n  constructor(position: Position, wlSize: Size, firstLog: boolean = false) {\n    this.position = position;\n    this.wlSize = wlSize;\n\n    if (firstLog) {\n      this.branchFacing = facingENUM.LEFT;\n    } else {\n      const rand = Math.floor(Math.random() * 2) + 1;\n      this.branchFacing = rand === 1 ? facingENUM.LEFT : facingENUM.RIGHT;\n    }\n    this.branchSize = { width: 100, height: 30 };\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    // -- Render Wooden Log\n    ctx.save();\n    ctx.fillStyle = 'blue';\n    ctx.fillRect(\n      this.position.x,\n      this.position.y,\n      this.wlSize.width,\n      this.wlSize.height\n    );\n    ctx.restore();\n\n    // -- Render branchFacing\n    ctx.save();\n    ctx.fillStyle = 'green';\n    const branchPos: number =\n      this.branchFacing === facingENUM.LEFT\n        ? this.position.x - this.branchSize.width\n        : this.position.x + this.branchSize.width;\n    ctx.fillRect(\n      branchPos,\n      this.position.y,\n      this.branchSize.width,\n      this.branchSize.height\n    );\n    ctx.restore();\n  }\n}\n\nexport default WoodenLog;\n","import { mapManager } from '../managers/MapManager';\nimport { facingENUM, Position } from '../types/positions';\nimport { Size } from '../types/sizes';\nimport { KeyboardMap } from '../utils/keyboard-map';\nimport Actor from './Actor';\nimport WoodenLog from './WoodenLog';\n\nconst createWoodenLogs = (\n  canvas: Size,\n  numLogs: number = 10\n): Array<WoodenLog> => {\n  const tree: Array<WoodenLog> = [];\n\n  for (let i = 0; i < numLogs; i++) {\n    const wlSize: Size = { width: 100, height: 100 };\n\n    const middlePosPoint =\n      mapManager.points[2].start + mapManager.pointsWidth / 2;\n\n    const wlPos: Position = {\n      x: middlePosPoint - wlSize.width / 2,\n      y: canvas.height - 150 - i * 105\n    };\n\n    tree.push(new WoodenLog(wlPos, wlSize, i === 0));\n  }\n\n  return tree;\n};\n\nclass Tree extends Actor {\n  woodenLogs: Array<WoodenLog>;\n\n  keyboardMap: KeyboardMap;\n\n  constructor(canvas: Size, keyboardMap: KeyboardMap, numLogs: number = 10) {\n    super();\n    this.woodenLogs = createWoodenLogs(canvas, numLogs);\n    this.keyboardMap = keyboardMap;\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    this.woodenLogs.forEach((e) => e.draw(ctx));\n  }\n\n  handleInputDOWN(key: string) {\n    const input = this.keyboardMap[key];\n\n    if (input === facingENUM.LEFT || input === facingENUM.RIGHT) {\n      // -- Remove First Element\n      this.woodenLogs.shift();\n\n      // -- Move all the [ Wooden Log ] Positions\n      this.woodenLogs.forEach((wl) => {\n        wl.position.y += wl.wlSize.height + 5;\n      });\n\n      // -- Add new [ Wooden Log ] to the tree at the last position\n      const wlSize: Size = { width: 100, height: 100 };\n\n      const middlePosPoint =\n        mapManager.points[2].start + mapManager.pointsWidth / 2;\n\n      const wlPos: Position = {\n        x: middlePosPoint - wlSize.width / 2,\n        y: mapManager.canvasSize.height - 150 - 9 * 105\n      };\n\n      this.woodenLogs.push(new WoodenLog(wlPos, wlSize));\n    }\n  }\n}\n\nexport default Tree;\n","import { mapManager, initMapManager } from './managers/MapManager';\nimport { gameManager, initGameManager } from './managers/GameManager';\nimport Timberman from './actors/Timberman';\nimport { mapA } from './utils/keyboard-map';\nimport Tree from './actors/Tree';\nimport { Size } from './types/sizes';\nimport Actor from './actors/Actor';\nimport { Player } from './types/player';\n\nwindow.onload = () => {\n  const canvas = document.getElementById('canvas-game') as HTMLCanvasElement;\n  const ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n  const canvasSize: Size = { width: canvas.width, height: canvas.height };\n\n  // [ Init Managers ]\n  initMapManager(canvasSize);\n\n  // #region [ Init Actors ]\n\n  // -- Timberman\n  const timberman: Timberman = new Timberman(canvasSize, mapA);\n\n  // -- Wooden Tree\n  const tree: Tree = new Tree(canvasSize, mapA, 10);\n  // #endregion\n\n  const actors: Array<Actor> = [timberman, tree];\n\n  // [ Init Game Manager ]\n  const players: Array<Player> = [\n    { timberman, tree, keyboardMap: mapA }\n    // { timberman2, tree2, keyboardMap: mapB }, // -- In case you want to add another player\n  ];\n  initGameManager(players);\n\n  // -- Render Loop\n  let lastFrame = 0;\n  const render = (time: number): void => {\n    // -- Get Delta\n    const delta = (time - lastFrame) / 1000;\n    lastFrame = time;\n    // console.log(delta);\n\n    // -- Clear the canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    if (gameManager.isPlaying) {\n      // -- Draw Section\n      actors.forEach((actor) => actor.draw(ctx));\n\n      // -- Check players positions\n      gameManager.update();\n    } else {\n      // -- Game Over Message\n      ctx.font = '15px Arial';\n      ctx.fillStyle = 'black';\n      ctx.fillText(`Game Over...`, canvasSize.width / 2, canvasSize.height / 2);\n    }\n\n    // -- Recurisve\n    window.requestAnimationFrame(render);\n  };\n\n  // -- Start the game\n  window.requestAnimationFrame(render);\n\n  // -- Add Event Listeners\n  document.body.addEventListener('keydown', (event) => {\n    if (gameManager.isPlaying) {\n      actors.forEach((actor) => actor.handleInputDOWN(event.key));\n    }\n  });\n};\n"],"names":["$b76e4b56ecbb8faf$var$MapManager","canvasSize1","this","canvasSize","pointsWidth","width","pointsHelper","start","i","end","push","$b76e4b56ecbb8faf$var$getPointsArray","points","$b76e4b56ecbb8faf$export$fef8b6f15112b2ca","$ef5e44257fdce7da$var$GameManager","players1","isPlaying","players","update","forEach","player","timberman","facing","tree","woodenLogs","branchFacing","$ef5e44257fdce7da$export$ab06c38123110f1f","facingENUM","$a6845bf1f59e284a$export$7ce44a5e993f42ea","$8235678231353d24$export$2e2bcd8739ae039","draw","ctx","handleInputDOWN","key","$8aa3bd67dcb811a8$export$2e2bcd8739ae039","keyboardMap","super","tmSize","height","positions","canvas","middlePosPoint","tmPosLeft","x","y","$8aa3bd67dcb811a8$var$createPositionsTM","RIGHT","save","fillStyle","curPosition","LEFT","fillRect","restore","input","$6f5fc56be7ebde6b$export$b876a215b1634849","ArrowLeft","ArrowRight","$0221a8df29792366$export$2e2bcd8739ae039","position","wlSize","firstLog","rand","Math","floor","random","branchSize","branchPos","$ee9bfff312bfbe00$export$2e2bcd8739ae039","numLogs","wlPos","$ee9bfff312bfbe00$var$createWoodenLogs","e","shift","wl","window","onload","document","getElementById","getContext","$b76e4b56ecbb8faf$export$5b9231e05761732a","actors","$ef5e44257fdce7da$export$59c269ab1c60136c","lastFrame","render","time","clearRect","actor","font","fillText","requestAnimationFrame","body","addEventListener","event"],"version":3,"file":"index.59577d7f.js.map"}