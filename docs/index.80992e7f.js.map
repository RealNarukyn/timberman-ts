{"mappings":"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","sources":["src/managers/MapManager.ts","src/types/positions.ts","src/actors/actor.ts","src/actors/timberman.ts","src/utils/keyboard-map.ts","src/actors/wooden-log.ts","src/actors/tree.ts","src/index.ts"],"sourcesContent":["import { Size } from '../types/sizes';\n\nconst getPointsArray = (\n  pointsWidth: number\n): Array<{ start: number; end: number }> => {\n  const pointsHelper: Array<{ start: number; end: number }> = [];\n  let start: number = 0;\n\n  for (let i = 0; i < 5; i++) {\n    const end = start + pointsWidth;\n    pointsHelper.push({ start, end });\n    start += pointsWidth;\n  }\n\n  return pointsHelper;\n};\n\nclass MapManager {\n  canvasSize: Size;\n\n  pointsWidth: number;\n\n  points: Array<{ start: number; end: number }>;\n\n  constructor(canvasSize: Size) {\n    this.canvasSize = canvasSize;\n    this.pointsWidth = canvasSize.width / 5;\n    const pointsHelper: Array<{ start: number; end: number }> = getPointsArray(\n      this.pointsWidth\n    );\n    this.points = pointsHelper;\n  }\n}\n\n// eslint-disable-next-line import/no-mutable-exports\nexport let mapManager: MapManager;\n\nexport const initMapManager = (\n  canvasSize: Size = { width: 800, height: 900 }\n) => {\n  mapManager = new MapManager(canvasSize);\n};\n","export interface Position {\n  x: number;\n  y: number;\n}\n\nexport enum facingENUM {\n  // eslint-disable-next-line no-unused-vars\n  LEFT,\n  // eslint-disable-next-line no-unused-vars\n  RIGHT\n}\n","/* eslint-disable no-unused-vars */\n/* eslint-disable class-methods-use-this */\n\nclass Actor {\n  update(): void {}\n\n  draw(ctx: CanvasRenderingContext2D): void {}\n\n  handleInputDOWN(key: string): void {}\n}\n\nexport default Actor;\n","import { Position, facingENUM } from '../types/positions';\nimport { KeyboardMap } from '../utils/keyboard-map';\nimport Actor from './actor';\n\nclass Timberman extends Actor {\n  positions: Array<Position>;\n\n  facing: facingENUM;\n\n  keyboardMap: KeyboardMap;\n\n  constructor(positions: Array<Position>, keyboardMap: KeyboardMap) {\n    super();\n    this.positions = positions;\n    this.facing = facingENUM.RIGHT;\n    this.keyboardMap = keyboardMap;\n  }\n\n  // update() {}\n\n  draw(ctx: CanvasRenderingContext2D) {\n    ctx.save();\n\n    ctx.fillStyle = 'red';\n\n    const curPosition: Position =\n      this.facing === facingENUM.LEFT ? this.positions[0] : this.positions[1];\n    ctx.fillRect(curPosition.x, curPosition.y, 100, 100);\n\n    ctx.restore();\n  }\n\n  handleInputDOWN(key: string) {\n    const input = this.keyboardMap[key];\n\n    if (input === facingENUM.LEFT) this.facing = facingENUM.LEFT;\n    if (input === facingENUM.RIGHT) this.facing = facingENUM.RIGHT;\n  }\n}\n\nexport default Timberman;\n","import { facingENUM } from '../types/positions';\n\nexport interface KeyboardMap {\n  [key: string]: facingENUM;\n}\n\nexport const mapA: KeyboardMap = {\n  ArrowLeft: facingENUM.LEFT,\n  ArrowRight: facingENUM.RIGHT\n};\n\nexport const mapB: KeyboardMap = {\n  a: facingENUM.LEFT,\n  A: facingENUM.LEFT,\n  d: facingENUM.RIGHT,\n  D: facingENUM.RIGHT\n};\n","import { Position, facingENUM } from '../types/positions';\nimport { Size } from '../types/sizes';\n\nclass WoodenLog {\n  position: Position;\n\n  branch: facingENUM;\n\n  wlSize: Size;\n\n  branchSize: Size;\n\n  constructor(position: Position, firstLog: boolean = false) {\n    this.position = position;\n    this.wlSize = { width: 100, height: 100 };\n\n    if (firstLog) {\n      this.branch = facingENUM.LEFT;\n    } else {\n      const rand = Math.floor(Math.random() * 2) + 1;\n      this.branch = rand === 1 ? facingENUM.LEFT : facingENUM.RIGHT;\n    }\n    this.branchSize = { width: 100, height: 30 };\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    // -- Render Wooden Log\n    ctx.save();\n    ctx.fillStyle = 'blue';\n    ctx.fillRect(\n      this.position.x,\n      this.position.y,\n      this.wlSize.width,\n      this.wlSize.height\n    );\n    ctx.restore();\n\n    // -- Render Branch\n    ctx.save();\n    ctx.fillStyle = 'green';\n    const branchPos: number =\n      this.branch === facingENUM.LEFT\n        ? this.position.x - this.branchSize.width\n        : this.position.x + this.branchSize.width;\n    ctx.fillRect(\n      branchPos,\n      this.position.y,\n      this.branchSize.width,\n      this.branchSize.height\n    );\n    ctx.restore();\n  }\n}\n\nexport default WoodenLog;\n","import { mapManager } from '../managers/MapManager';\nimport { facingENUM, Position } from '../types/positions';\nimport { Size } from '../types/sizes';\nimport { KeyboardMap } from '../utils/keyboard-map';\nimport Actor from './actor';\nimport WoodenLog from './wooden-log';\n\nconst createWoodenLogs = (\n  canvas: Size,\n  numLogs: number = 10\n): Array<WoodenLog> => {\n  const tree: Array<WoodenLog> = [];\n\n  for (let i = 0; i < numLogs; i++) {\n    const wlPos: Position = {\n      x: mapManager.points[2].start + mapManager.pointsWidth / 2,\n      y: canvas.height - 150 - i * 105\n    };\n\n    tree.push(new WoodenLog(wlPos, i === 0));\n  }\n\n  return tree;\n};\n\nclass Tree extends Actor {\n  woodenLogs: Array<WoodenLog>;\n\n  keyboardMap: KeyboardMap;\n\n  constructor(canvas: Size, keyboardMap: KeyboardMap, numLogs: number = 10) {\n    super();\n    this.woodenLogs = createWoodenLogs(canvas, numLogs);\n    this.keyboardMap = keyboardMap;\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    this.woodenLogs.forEach((e) => e.draw(ctx));\n  }\n\n  handleInputDOWN(key: string) {\n    const input = this.keyboardMap[key];\n\n    if (input === facingENUM.LEFT || input === facingENUM.RIGHT) {\n      // -- Remove First Element\n      this.woodenLogs.shift();\n\n      // -- Move all the [ Wooden Log ] Positions\n      this.woodenLogs.forEach((wl) => {\n        wl.position.y += wl.wlSize.height + 5;\n      });\n\n      // -- Add new [ Wooden Log ] to the tree at the last position\n      const wlPos: Position = {\n        x: mapManager.points[2].start + mapManager.pointsWidth / 2,\n        y: mapManager.canvasSize.height - 150 - 9 * 105\n      };\n      this.woodenLogs.push(new WoodenLog(wlPos));\n    }\n  }\n}\n\nexport default Tree;\n","import { mapManager, initMapManager } from './managers/MapManager';\nimport Timberman from './actors/timberman';\nimport { Position } from './types/positions';\nimport { mapA } from './utils/keyboard-map';\nimport Tree from './actors/tree';\nimport { Size } from './types/sizes';\nimport Actor from './actors/actor';\n\nwindow.onload = () => {\n  const canvas = document.getElementById('canvas-game') as HTMLCanvasElement;\n  const ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n  const canvasSize: Size = { width: canvas.width, height: canvas.height };\n\n  // -- Init Managers\n  initMapManager(canvasSize);\n  console.log('The Map is divided horizontally in:', mapManager.points);\n\n  // -- Init Actors\n  // #region [ Timberman ]\n  const tmPosLeft: Position = {\n    x: mapManager.points[1].start + mapManager.pointsWidth / 2,\n    y: canvas.height - 150\n  };\n  const tmPosRight: Position = {\n    x: mapManager.points[3].start + mapManager.pointsWidth / 2,\n    y: canvas.height - 150\n  };\n  const timberman: Timberman = new Timberman([tmPosLeft, tmPosRight], mapA);\n  // #endregion\n\n  // #region [ Wooden Tree ]\n  const tree: Tree = new Tree(canvasSize, mapA, 10);\n  // #endregion\n\n  const actors: Array<Actor> = [timberman, tree];\n\n  // -- Render Loop\n  let lastFrame = 0;\n  const render = (time: number): void => {\n    // -- Get Delta\n    const delta = (time - lastFrame) / 1000;\n    lastFrame = time;\n    console.log(delta);\n\n    // -- Clear the canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // -- Draw Section\n    actors.forEach((actor) => actor.draw(ctx));\n\n    // -- Recurisve\n    window.requestAnimationFrame(render);\n  };\n\n  // -- Start the game\n  window.requestAnimationFrame(render);\n\n  // -- Add Event Listeners\n  document.body.addEventListener('keydown', (event) => {\n    actors.forEach((actor) => actor.handleInputDOWN(event.key));\n  });\n};\n"],"names":["$b76e4b56ecbb8faf$var$MapManager","canvasSize1","this","canvasSize","pointsWidth","width","pointsHelper","start","i","end","push","$b76e4b56ecbb8faf$var$getPointsArray","points","$b76e4b56ecbb8faf$export$fef8b6f15112b2ca","facingENUM","$a6845bf1f59e284a$export$7ce44a5e993f42ea","$8295367afc31fb99$export$2e2bcd8739ae039","update","draw","ctx","handleInputDOWN","key","$a44f627d4b2cbe0c$export$2e2bcd8739ae039","positions","keyboardMap","super","facing","RIGHT","save","fillStyle","curPosition","LEFT","fillRect","x","y","restore","input","$6f5fc56be7ebde6b$export$b876a215b1634849","ArrowLeft","ArrowRight","$7d3dd20e715e85d2$export$2e2bcd8739ae039","position","firstLog","wlSize","height","branch","rand","Math","floor","random","branchSize","branchPos","$087d283f4c0f1d3f$export$2e2bcd8739ae039","canvas","numLogs","woodenLogs","tree","wlPos","$087d283f4c0f1d3f$var$createWoodenLogs","forEach","e","shift","wl","window","onload","document","getElementById","getContext","$b76e4b56ecbb8faf$export$5b9231e05761732a","console","log","tmPosLeft","tmPosRight","actors","lastFrame","render","time","delta","clearRect","actor","requestAnimationFrame","body","addEventListener","event"],"version":3,"file":"index.80992e7f.js.map"}