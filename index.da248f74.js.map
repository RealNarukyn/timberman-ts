{"mappings":"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","sources":["src/managers/MapManager.ts","src/managers/GameManager.ts","src/types/positions.ts","src/actors/Actor.ts","src/actors/Timberman.ts","src/utils/keyboard-map.ts","src/actors/WoodenLog.ts","src/actors/Tree.ts","src/actors/FPSviewer.ts","src/index.ts"],"sourcesContent":["import { Size } from '../types/sizes';\n\nconst getPointsArray = (\n  pointsWidth: number\n): Array<{ start: number; end: number }> => {\n  const pointsHelper: Array<{ start: number; end: number }> = [];\n  let start: number = 0;\n\n  for (let i = 0; i < 5; i++) {\n    const end = start + pointsWidth;\n    pointsHelper.push({ start, end });\n    start += pointsWidth;\n  }\n\n  return pointsHelper;\n};\n\nclass MapManager {\n  canvasSize: Size;\n\n  pointsWidth: number;\n\n  points: Array<{ start: number; end: number }>;\n\n  constructor(canvasSize: Size) {\n    this.canvasSize = canvasSize;\n    this.pointsWidth = canvasSize.width / 5;\n    const pointsHelper: Array<{ start: number; end: number }> = getPointsArray(\n      this.pointsWidth\n    );\n    this.points = pointsHelper;\n  }\n}\n\n// eslint-disable-next-line import/no-mutable-exports\nexport let mapManager: MapManager;\n\nexport const initMapManager = (\n  canvasSize: Size = { width: 800, height: 900 }\n) => {\n  mapManager = new MapManager(canvasSize);\n};\n","import { Player } from '../types/player';\n\nclass GameManager {\n  isPlaying: boolean;\n\n  players: Array<Player>;\n\n  constructor(players: Array<Player>) {\n    this.isPlaying = true;\n    this.players = players;\n  }\n\n  update() {\n    this.players.forEach((player: Player) => {\n      // -- Player arrives at 0 Health\n      if (player.timberman.health <= 0) {\n        this.isPlaying = false;\n        player.timberman.health = 0;\n      }\n\n      // -- Player Collides With Branch\n      if (player.timberman.facing === player.tree.woodenLogs[0].branchFacing) {\n        this.isPlaying = false;\n      }\n    });\n  }\n}\n\n// eslint-disable-next-line import/no-mutable-exports\nexport let gameManager: GameManager;\n\nexport const initGameManager = (players: Array<Player>) => {\n  gameManager = new GameManager(players);\n};\n","export interface Position {\n  x: number;\n  y: number;\n}\n\nexport enum facingENUM {\n  // eslint-disable-next-line no-unused-vars\n  LEFT,\n  // eslint-disable-next-line no-unused-vars\n  RIGHT,\n  // eslint-disable-next-line no-unused-vars\n  NONE\n}\n","/* eslint-disable no-unused-vars */\n/* eslint-disable class-methods-use-this */\n\nclass Actor {\n  update(delta: number): void {}\n\n  draw(ctx: CanvasRenderingContext2D, delta: number): void {}\n\n  handleInputDOWN(key: string): void {}\n}\n\nexport default Actor;\n","import { mapManager } from '../managers/MapManager';\nimport { Position, facingENUM } from '../types/positions';\nimport { Size } from '../types/sizes';\nimport { KeyboardMap } from '../utils/keyboard-map';\nimport Actor from './Actor';\n\nconst HEALTH_DECRESEASE_SPEED: number = 16;\nconst HEALTH_INCRESEASE_SPEED: number = 12;\nconst HEALTH_BAR_HEIGHT: number = 20;\n\nconst createPositionsTM = (canvas: Size, tmSize: Size): Array<Position> => {\n  // -- Left Point\n  let middlePosPoint = mapManager.points[1].start + mapManager.pointsWidth / 2;\n  const tmPosLeft: Position = {\n    x: middlePosPoint - tmSize.width / 2,\n    y: canvas.height - 150\n  };\n\n  // -- Right Point\n  middlePosPoint = mapManager.points[3].start + mapManager.pointsWidth / 2;\n  const tmPosRight: Position = {\n    x: middlePosPoint - tmSize.width / 2,\n    y: canvas.height - 150\n  };\n\n  return [tmPosLeft, tmPosRight];\n};\n\nclass Timberman extends Actor {\n  tmSize: Size;\n\n  positions: Array<Position>;\n\n  facing: facingENUM;\n\n  keyboardMap: KeyboardMap;\n\n  health: number;\n\n  constructor(canvasSize: Size, keyboardMap: KeyboardMap) {\n    super();\n\n    this.tmSize = { width: 100, height: 100 };\n\n    this.positions = createPositionsTM(canvasSize, this.tmSize);\n\n    this.facing = facingENUM.RIGHT;\n\n    this.keyboardMap = keyboardMap;\n\n    this.health = 100;\n  }\n\n  update(delta: number) {\n    if (this.health > 100) this.health = 100;\n    if (this.health < 0) this.health = 0;\n\n    this.health -= HEALTH_DECRESEASE_SPEED * delta;\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    // #region [ Draw Timberman ]\n    ctx.save();\n\n    ctx.fillStyle = 'red';\n\n    const curPosition: Position =\n      this.facing === facingENUM.LEFT ? this.positions[0] : this.positions[1];\n\n    ctx.fillRect(\n      curPosition.x,\n      curPosition.y,\n      this.tmSize.width,\n      this.tmSize.height\n    );\n\n    ctx.restore();\n    // #endregion\n\n    // #region [ Draw Healthbar ]\n    ctx.save();\n    ctx.fillStyle = 'orange';\n    ctx.fillRect(\n      curPosition.x,\n      curPosition.y - (HEALTH_BAR_HEIGHT + 10),\n      this.health,\n      HEALTH_BAR_HEIGHT\n    );\n    ctx.restore();\n    // #endregion\n  }\n\n  handleInputDOWN(key: string) {\n    const input = this.keyboardMap[key];\n\n    if (input === facingENUM.LEFT) {\n      this.facing = facingENUM.LEFT;\n      this.health += HEALTH_INCRESEASE_SPEED * 0.2;\n    }\n\n    if (input === facingENUM.RIGHT) {\n      this.facing = facingENUM.RIGHT;\n      this.health += HEALTH_INCRESEASE_SPEED * 0.2;\n    }\n  }\n}\n\nexport default Timberman;\n","import { facingENUM } from '../types/positions';\n\nexport interface KeyboardMap {\n  [key: string]: facingENUM;\n}\n\nexport const mapA: KeyboardMap = {\n  ArrowLeft: facingENUM.LEFT,\n  ArrowRight: facingENUM.RIGHT\n};\n\nexport const mapB: KeyboardMap = {\n  a: facingENUM.LEFT,\n  A: facingENUM.LEFT,\n  d: facingENUM.RIGHT,\n  D: facingENUM.RIGHT\n};\n","import { Position, facingENUM } from '../types/positions';\nimport { Size } from '../types/sizes';\n\nclass WoodenLog {\n  position: Position;\n\n  branchFacing: facingENUM;\n\n  wlSize: Size;\n\n  branchSize: Size;\n\n  constructor(position: Position, wlSize: Size, firstLog: boolean = false) {\n    this.position = position;\n    this.wlSize = wlSize;\n\n    if (firstLog) {\n      this.branchFacing = facingENUM.LEFT;\n    } else {\n      const rand = Math.floor(Math.random() * 3) + 1;\n      if (rand === 1) this.branchFacing = facingENUM.LEFT;\n      else if (rand === 2) this.branchFacing = facingENUM.RIGHT;\n      else this.branchFacing = facingENUM.NONE;\n    }\n    this.branchSize = { width: 100, height: 30 };\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    // -- Render Wooden Log\n    ctx.save();\n    ctx.fillStyle = 'blue';\n    ctx.fillRect(\n      this.position.x,\n      this.position.y,\n      this.wlSize.width,\n      this.wlSize.height\n    );\n    ctx.restore();\n\n    // -- Render branchFacing\n    if (this.branchFacing !== facingENUM.NONE) {\n      ctx.save();\n      ctx.fillStyle = 'green';\n\n      const branchPos: number =\n        this.branchFacing === facingENUM.LEFT\n          ? this.position.x - this.branchSize.width\n          : this.position.x + this.branchSize.width;\n      ctx.fillRect(\n        branchPos,\n        this.position.y,\n        this.branchSize.width,\n        this.branchSize.height\n      );\n      ctx.restore();\n    }\n  }\n}\n\nexport default WoodenLog;\n","import { mapManager } from '../managers/MapManager';\nimport { facingENUM, Position } from '../types/positions';\nimport { Size } from '../types/sizes';\nimport { KeyboardMap } from '../utils/keyboard-map';\nimport Actor from './Actor';\nimport WoodenLog from './WoodenLog';\n\nconst createWoodenLogs = (\n  canvas: Size,\n  numLogs: number = 10\n): Array<WoodenLog> => {\n  const tree: Array<WoodenLog> = [];\n\n  for (let i = 0; i < numLogs; i++) {\n    const wlSize: Size = { width: 100, height: 100 };\n\n    const middlePosPoint =\n      mapManager.points[2].start + mapManager.pointsWidth / 2;\n\n    const wlPos: Position = {\n      x: middlePosPoint - wlSize.width / 2,\n      y: canvas.height - 150 - i * 105\n    };\n\n    tree.push(new WoodenLog(wlPos, wlSize, i === 0));\n  }\n\n  return tree;\n};\n\nclass Tree extends Actor {\n  woodenLogs: Array<WoodenLog>;\n\n  keyboardMap: KeyboardMap;\n\n  constructor(canvas: Size, keyboardMap: KeyboardMap, numLogs: number = 10) {\n    super();\n    this.woodenLogs = createWoodenLogs(canvas, numLogs);\n    this.keyboardMap = keyboardMap;\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    this.woodenLogs.forEach((e) => e.draw(ctx));\n  }\n\n  handleInputDOWN(key: string) {\n    const input = this.keyboardMap[key];\n\n    if (input === facingENUM.LEFT || input === facingENUM.RIGHT) {\n      // -- Remove First Element\n      this.woodenLogs.shift();\n\n      // -- Move all the [ Wooden Log ] Positions\n      this.woodenLogs.forEach((wl) => {\n        wl.position.y += wl.wlSize.height + 5;\n      });\n\n      // -- Add new [ Wooden Log ] to the tree at the last position\n      const wlSize: Size = { width: 100, height: 100 };\n\n      const middlePosPoint =\n        mapManager.points[2].start + mapManager.pointsWidth / 2;\n\n      const wlPos: Position = {\n        x: middlePosPoint - wlSize.width / 2,\n        y: mapManager.canvasSize.height - 150 - 9 * 105\n      };\n\n      this.woodenLogs.push(new WoodenLog(wlPos, wlSize));\n    }\n  }\n}\n\nexport default Tree;\n","import { Position } from '../types/positions';\nimport Actor from './Actor';\n\nclass FPSViewer extends Actor {\n  position: Position;\n\n  constructor(position: Position) {\n    super();\n    this.position = position;\n  }\n\n  draw(ctx: CanvasRenderingContext2D, delta: number) {\n    const fps = (1 / delta).toFixed(2);\n    ctx.font = '15px Arial';\n    ctx.fillStyle = 'black';\n    ctx.fillText(`FPS:${fps}`, this.position.x, this.position.y);\n  }\n}\n\nexport default FPSViewer;\n","import { mapManager, initMapManager } from './managers/MapManager';\nimport { gameManager, initGameManager } from './managers/GameManager';\nimport Timberman from './actors/Timberman';\nimport { mapA } from './utils/keyboard-map';\nimport Tree from './actors/Tree';\nimport { Size } from './types/sizes';\nimport Actor from './actors/Actor';\nimport { Player } from './types/player';\nimport FPSViewer from './actors/FPSviewer';\n\nwindow.onload = () => {\n  const canvas = document.getElementById('canvas-game') as HTMLCanvasElement;\n  const ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n  const canvasSize: Size = { width: canvas.width, height: canvas.height };\n\n  // [ Init Managers ]\n  initMapManager(canvasSize);\n\n  // #region [ Init Actors ]\n\n  // -- FPS Viewer\n  const FPSviewer: FPSViewer = new FPSViewer({ x: 50, y: 50 });\n\n  // -- Timberman\n  const timberman: Timberman = new Timberman(canvasSize, mapA);\n\n  // -- Wooden Tree\n  const tree: Tree = new Tree(canvasSize, mapA, 10);\n  // #endregion\n\n  const actors: Array<Actor> = [FPSviewer, timberman, tree];\n\n  // [ Init Game Manager ]\n  const players: Array<Player> = [\n    { timberman, tree, keyboardMap: mapA }\n    // { timberman2, tree2, keyboardMap: mapB }, // -- In case you want to add another player\n  ];\n  initGameManager(players);\n\n  // -- Render Loop\n  let lastFrame = 0;\n  const render = (time: number): void => {\n    // -- Get Delta\n    const delta = (time - lastFrame) / 1000;\n    lastFrame = time;\n\n    // -- Clear the canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    if (gameManager.isPlaying) {\n      // -- Actors Actions\n      actors.forEach((actor) => {\n        // -- Draw Section\n        actor.draw(ctx, delta);\n\n        // -- Update Player Health\n        actor.update(delta);\n      });\n\n      // -- Check players positions\n      gameManager.update();\n    } else {\n      // -- Game Over Message\n      ctx.font = '15px Arial';\n      ctx.fillStyle = 'black';\n      ctx.fillText(\n        `Game Over...`,\n        canvasSize.width / 2 - 25,\n        canvasSize.height / 2 - 25\n      );\n    }\n\n    // -- Recurisve\n    window.requestAnimationFrame(render);\n  };\n\n  // -- Start the game\n  window.requestAnimationFrame(render);\n\n  // -- Add Event Listeners\n  document.body.addEventListener('keydown', (event) => {\n    if (gameManager.isPlaying) {\n      actors.forEach((actor) => actor.handleInputDOWN(event.key));\n    }\n  });\n};\n"],"names":["$b76e4b56ecbb8faf$var$MapManager","canvasSize1","this","canvasSize","pointsWidth","width","pointsHelper","start","i","end","push","$b76e4b56ecbb8faf$var$getPointsArray","points","$b76e4b56ecbb8faf$export$fef8b6f15112b2ca","$ef5e44257fdce7da$var$GameManager","players1","isPlaying","players","update","forEach","player","timberman","health","facing","tree","woodenLogs","branchFacing","$ef5e44257fdce7da$export$ab06c38123110f1f","facingENUM","$a6845bf1f59e284a$export$7ce44a5e993f42ea","$8235678231353d24$export$2e2bcd8739ae039","delta","draw","ctx","delta1","handleInputDOWN","key","$8aa3bd67dcb811a8$export$2e2bcd8739ae039","keyboardMap","super","tmSize","height","positions","canvas","middlePosPoint","tmPosLeft","x","y","$8aa3bd67dcb811a8$var$createPositionsTM","RIGHT","save","fillStyle","curPosition","LEFT","fillRect","restore","input","$6f5fc56be7ebde6b$export$b876a215b1634849","ArrowLeft","ArrowRight","$0221a8df29792366$export$2e2bcd8739ae039","position","wlSize","firstLog","rand","Math","floor","random","NONE","branchSize","branchPos","$ee9bfff312bfbe00$export$2e2bcd8739ae039","numLogs","wlPos","$ee9bfff312bfbe00$var$createWoodenLogs","e","shift","wl","$686b1df20744f34f$export$2e2bcd8739ae039","fps","toFixed","font","fillText","window","onload","document","getElementById","getContext","$b76e4b56ecbb8faf$export$5b9231e05761732a","FPSviewer","actors","$ef5e44257fdce7da$export$59c269ab1c60136c","lastFrame","render","time","clearRect","actor","requestAnimationFrame","body","addEventListener","event"],"version":3,"file":"index.da248f74.js.map"}