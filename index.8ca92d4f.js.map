{"mappings":"imBAsBA,IAAuBA,EACDC,mFArBtB,IAAIC,EAAU,GAoBdF,WAlBkBG,GAGhB,IAFA,IAAIC,EAAOC,OAAOD,KAAKD,GAEdG,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAC/BJ,EAAQE,EAAKE,IAAMH,EAAMC,EAAKE,KAelCL,WAXiBO,GACf,IAAIC,EAAWP,EAAQM,GAEvB,GAAgB,MAAZC,EACF,MAAM,IAAIC,MAAM,oCAAsCF,GAGxD,OAAOC,MCnBTE,EAAA,SAAAC,SAA8CC,KAAKC,MAAM,8LC8CzD,IAAoBC,+CA5CpB,IAAIC,EAAY,YA6BPC,EAAWC,GAClB,OAAQ,GAAKA,GAAKC,QAAO,wCAA0C,MAAQ,IAc7EJ,WA1C4BP,GAC1B,IAAIY,EAAQJ,EAAUR,GAOtB,OALKY,IACHA,aAQF,IACE,MAAM,IAAIV,MACV,MAAOW,GACP,IAAIC,GAAW,GAAKD,EAAIE,OAAOC,MAAK,kCAEpC,GAAIF,EAGF,OAAOL,EAAWK,EAAQ,IAI9B,MAAO,IApBGG,GACRT,EAAUR,GAAMY,GAGXA,MCZTM,EAAiBf,EAAA,SAAAgB,aAA6C,SAAWhB,EAAA,SAAAiB,QAA6C,eCmBhHC,cASQC,GACVC,KAAKC,WAAaF,EAClBC,KAAKE,YAAcH,EAAWI,MAAQ,EACtC,MAAMC,EA3BU,CAClBF,IAEA,MAAME,EAAsD,GAC5D,IAAIC,EAAgB,EAEpB,IAAK,IAAI9B,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,MAAM+B,EAAMD,EAAQH,EACpBE,EAAaG,KAAK,OAAEF,MAAOC,IAC3BD,GAASH,EAGX,OAAOE,GAeuDI,CAC1DR,KAAKE,aAEPF,KAAKS,OAASL,EAEdJ,KAAKU,cAAgB,IAAIC,MACzBX,KAAKU,cAAcE,IAAMjB,EAG3BkB,KAAKC,GACHA,EAAIC,UACFf,KAAKU,cACL,EACA,EACAV,KAAKC,WAAWE,MAChBH,KAAKC,WAAWe,SAMf,IAAIC,QCnCXC,EAb+B,CAC7BC,SAAU,CAAEC,EAAG,EAAGC,EAAG,EAAGC,EAAG,GAAIC,EAAG,IAClCC,SAAU,CAAEJ,EAAG,GAAIC,EAAG,EAAGC,EAAG,GAAIC,EAAG,IACnCE,SAAU,CAAEL,EAAG,IAAKC,EAAG,EAAGC,EAAG,GAAIC,EAAG,IACpCG,SAAU,CAAEN,EAAG,IAAKC,EAAG,EAAGC,EAAG,GAAIC,EAAG,IACpCI,SAAU,CAAEP,EAAG,IAAKC,EAAG,EAAGC,EAAG,GAAIC,EAAG,IACpCK,SAAU,CAAER,EAAG,IAAKC,EAAG,EAAGC,EAAG,GAAIC,EAAG,IACpCM,SAAU,CAAET,EAAG,IAAKC,EAAG,EAAGC,EAAG,GAAIC,EAAG,IACpCO,SAAU,CAAEV,EAAG,IAAKC,EAAG,EAAGC,EAAG,GAAIC,EAAG,IACpCQ,SAAU,CAAEX,EAAG,IAAKC,EAAG,EAAGC,EAAG,GAAIC,EAAG,IACpCS,SAAU,CAAEZ,EAAG,IAAKC,EAAG,EAAGC,EAAG,GAAIC,EAAG,KCdtCU,EAAiBrD,EAAA,SAAAgB,aAA6C,SAAWhB,EAAA,SAAAiB,QAA6C,eCKhHqC,cAOQC,GACVnC,KAAKoC,WAAY,EACjBpC,KAAKqC,QAAUF,EAEfnC,KAAKsC,YAAc,IAAI3B,MACvBX,KAAKsC,YAAY1B,IAAMqB,EAGzBM,SACEvC,KAAKqC,QAAQG,SAASC,IAEhBA,EAAOC,UAAUC,QAAU,IAC7B3C,KAAKoC,WAAY,EACjBK,EAAOC,UAAUC,OAAS,GAIxBF,EAAOC,UAAUE,SAAWH,EAAOI,KAAKC,WAAW,GAAGC,eACxD/C,KAAKoC,WAAY,MAKvBvB,KAAKC,GACHd,KAAKqC,QAAQG,SAASC,IAEpB3B,EAAIkC,OACJlC,EAAImC,UAAY,SAChBnC,EAAIoC,SACFT,EAAOC,UAAUS,aAAa/B,EAC9BqB,EAAOC,UAAUS,aAAa9B,EAC9BoB,EAAOC,UAAUC,OACjBF,EAAOC,UAAUU,cAAcpC,QAEjCF,EAAIuC,UAIJ,MAAMC,EAAsBb,EAAOC,UAAUjC,OAAO8C,WAAWC,MAAM,IACrE,GAAyB,IAArBF,EAAU9E,OAAc,CAC1B,MAAMiF,EACJvC,EAAS,UAAWuB,EAAOC,UAAUjC,OAAO8C,cAE9CzC,EAAIC,UACFf,KAAKsC,YACLmB,EAAUrC,EACVqC,EAAUpC,EACVoC,EAAUnC,EACVmC,EAAUlC,EACVkB,EAAOC,UAAUgB,eAAetC,EAChCqB,EAAOC,UAAUgB,eAAerC,EAChCoB,EAAOC,UAAUiB,WAAWxD,MAC5BsC,EAAOC,UAAUiB,WAAW3C,aAG9BsC,EAAUd,SAAO,CAAEoB,EAAGC,KACpB,MAAMJ,EACJvC,EAAS,UAAW0C,KAEtB9C,EAAIC,UACFf,KAAKsC,YACLmB,EAAUrC,EACVqC,EAAUpC,EACVoC,EAAUnC,EACVmC,EAAUlC,EACVkB,EAAOC,UAAUgB,eAAetC,EAC9ByC,EAAQpB,EAAOC,UAAUiB,WAAWxD,MACtCsC,EAAOC,UAAUgB,eAAerC,EAChCoB,EAAOC,UAAUiB,WAAWxD,MAC5BsC,EAAOC,UAAUiB,WAAW3C,eAUjC,IAAI8C,QCtFCC,GAAAA,EAAAC,IAAAA,EAAU,KAAVD,EAEN,KAAJ,GAAA,OAFUA,EAAAA,EAIL,MAAL,GAAA,QAJUA,EAAAA,EAMN,KAAJ,GAAA,WCAFE,EAV2C,MAGzC1B,OAAO2B,IAEPrD,KAAKC,EAA+BqD,IAEpCC,gBAAgBC,UCqGlBC,gBAlFwBL,cAsBpBhE,EACAsE,EACAC,EACAC,GAEAC,QACA1E,KAAK2E,OAAS,CAAExE,MAAO,IAAKa,OAAQ,KACpChB,KAAK4E,UA/Cc,EAAIC,EAAcF,KAEvC,IAAIG,EAAiB7D,EAAWR,OAAO,GAAGJ,MAAQY,EAAWf,YAAc,EAC3E,MAAM6E,EAAsB,CAC1B3D,EAAG0D,EAAiBH,EAAOxE,MAAQ,EACnCkB,EAAGwD,EAAO7D,OAAS,KAUrB,OANA8D,EAAiB7D,EAAWR,OAAO,GAAGJ,MAAQY,EAAWf,YAAc,EAMhE,CAAC6E,EALqB,CAC3B3D,EAAG0D,EAAiBH,EAAOxE,MAAQ,EACnCkB,EAAGwD,EAAO7D,OAAS,OAmCFgE,CAAkB/E,EAAYD,KAAK2E,QACpD3E,KAAK4C,OAASoB,EAAWiB,MACzBjF,KAAKyE,YAAcA,EACnBzE,KAAK2C,OAAS,IACd3C,KAAKS,OAAS,EACdT,KAAKmD,aAAeoB,EACpBvE,KAAKoD,cAAgB,CAAEjD,MAAOH,KAAK2C,OAAQ3B,OAAQ,IACnDhB,KAAK0D,eAAiBc,EACtBxE,KAAK2D,WAAa,CAAExD,MAAO,GAAIa,OAAQ,IAGzCuB,OAAO2B,GACDlE,KAAK2C,OAAS,MAAK3C,KAAK2C,OAAS,KACjC3C,KAAK2C,OAAS,IAAG3C,KAAK2C,OAAS,GAEnC3C,KAAK2C,QAjE+B,GAiEKuB,EAG3CrD,KAAKC,GACH,MAAMoE,EACJlF,KAAK4C,SAAWoB,EAAWmB,KAAOnF,KAAK4E,UAAU,GAAK5E,KAAK4E,UAAU,GAEvE9D,EAAIkC,OAEJlC,EAAImC,UAAY,MAEhBnC,EAAIoC,SACFgC,EAAY9D,EACZ8D,EAAY7D,EACZrB,KAAK2E,OAAOxE,MACZH,KAAK2E,OAAO3D,QAGdF,EAAIuC,UAGNe,gBAAgBC,GACd,MAAMe,EAAQpF,KAAKyE,YAAYJ,GAE3Be,IAAUpB,EAAWmB,OACvBnF,KAAK4C,OAASoB,EAAWmB,KACzBnF,KAAK2C,QA1F6B,GA0FO,GACzC3C,KAAKS,UAGH2E,IAAUpB,EAAWiB,QACvBjF,KAAK4C,OAASoB,EAAWiB,MACzBjF,KAAK2C,QAhG6B,GAgGO,GACzC3C,KAAKS,YClGJ,MAAM4E,EAAoB,CAC/BC,UAAWtB,EAAWmB,KACtBI,WAAYvB,EAAWiB,OAIpBjB,EAAWmB,KACXnB,EAAWmB,KACXnB,EAAWiB,MACXjB,EAAWiB,UC4ChBO,oBA/CcC,EAAoBC,EAAcC,GAAoB,GAIhE,GAHA3F,KAAKyF,SAAWA,EAChBzF,KAAK0F,OAASA,EAEVC,EACF3F,KAAK+C,aAAeiB,EAAWmB,SAC1B,CACL,MAAMS,EAAOC,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,EAC7B/F,KAAK+C,aAAR,IAAT6C,EAAgC5B,EAAWmB,KAC7B,IAATS,EAAgC5B,EAAWiB,MAC3BjB,EAAWgC,KAEtChG,KAAKiG,WAAa,CAAE9F,MAAO,IAAKa,OAAQ,IAG1CH,KAAKC,GAaH,GAXAA,EAAIkC,OACJlC,EAAImC,UAAY,OAChBnC,EAAIoC,SACFlD,KAAKyF,SAASrE,EACdpB,KAAKyF,SAASpE,EACdrB,KAAK0F,OAAOvF,MACZH,KAAK0F,OAAO1E,QAEdF,EAAIuC,UAGArD,KAAK+C,eAAiBiB,EAAWgC,KAAM,CACzClF,EAAIkC,OACJlC,EAAImC,UAAY,QAEhB,MAAMiD,EACJlG,KAAK+C,eAAiBiB,EAAWmB,KAC7BnF,KAAKyF,SAASrE,EAAIpB,KAAKiG,WAAW9F,MAClCH,KAAKyF,SAASrE,EAAIpB,KAAKiG,WAAW9F,MACxCW,EAAIoC,SACFgD,EACAlG,KAAKyF,SAASpE,EACdrB,KAAKiG,WAAW9F,MAChBH,KAAKiG,WAAWjF,QAElBF,EAAIuC,iBCmBV8C,gBA3CmBlC,cAKLY,EAAcJ,EAA0B2B,EAAkB,IACpE1B,QACA1E,KAAK8C,WA9Ba,EACpB+B,EACAuB,EAAkB,MAElB,MAAMvD,EAAyB,GAE/B,IAAK,IAAItE,EAAI,EAAGA,EAAI6H,EAAS7H,IAAK,CAChC,MAAMmH,EAAe,CAAEvF,MAAO,IAAKa,OAAQ,KAKrCqF,EAAkB,CACtBjF,EAHAH,EAAWR,OAAO,GAAGJ,MAAQY,EAAWf,YAAc,EAGlCwF,EAAOvF,MAAQ,EACnCkB,EAAGwD,EAAO7D,OAAS,IAAU,IAAJzC,GAG3BsE,EAAKtC,KAAK,IAAIiF,EAAUa,EAAOX,EAAc,IAANnH,IAGzC,OAAOsE,GAUayD,CAAiBzB,EAAQuB,GAC3CpG,KAAKyE,YAAcA,EAGrB5D,KAAKC,GACHd,KAAK8C,WAAWN,SAASoB,GAAMA,EAAE/C,KAAKC,KAGxCsD,gBAAgBC,GACd,MAAMe,EAAQpF,KAAKyE,YAAYJ,GAE/B,GAAIe,IAAUpB,EAAWmB,MAAQC,IAAUpB,EAAWiB,MAAO,CAE3DjF,KAAK8C,WAAWyD,QAGhBvG,KAAK8C,WAAWN,SAASgE,IACvBA,EAAGf,SAASpE,GAAKmF,EAAGd,OAAO1E,OAAS,KAItC,MAAM0E,EAAe,CAAEvF,MAAO,IAAKa,OAAQ,KAKrCqF,EAAkB,CACtBjF,EAHAH,EAAWR,OAAO,GAAGJ,MAAQY,EAAWf,YAAc,EAGlCwF,EAAOvF,MAAQ,EACnCkB,EAAGJ,EAAWhB,WAAWe,OAAS,IAAM,KAG1ChB,KAAK8C,WAAWvC,KAAK,IAAIiF,EAAUa,EAAOX,WCjDhDe,gBAhBwBxC,cAGVwB,GACVf,QACA1E,KAAKyF,SAAWA,EAGlB5E,KAAKC,EAA+BoD,GAClC,MAAMwC,GAAO,EAAIxC,GAAOyC,QAAQ,GAChC7F,EAAI8F,KAAO,aACX9F,EAAImC,UAAY,QAChBnC,EAAI+F,SAAQ,OAAQH,IAAO1G,KAAKyF,SAASrE,EAAGpB,KAAKyF,SAASpE,KCL9DyF,OAAOC,OAAM,KACX,MAAMlC,EAASmC,SAASC,eAAe,eACjCnG,EAAM+D,EAAOqC,WAAW,MACxBjH,EAAmB,CAAEE,MAAO0E,EAAO1E,MAAOa,OAAQ6D,EAAO7D,QXyCtC,EACzBf,EAAmB,CAAEE,MAAO,IAAKa,OAAQ,QAEzCC,EAAa,IAAInB,EAAWG,IWzC5BkH,CAAelH,GAKf,MAAMmH,EAAuB,IAAIX,EAAU,CAAErF,EAAG,GAAIC,EAAG,KAGjDqB,EAAuB,IAAI4B,EAC/BrE,EACA,CAAEmB,EAAG,GAAIC,EAAG,KACZ,CAAED,EAAG,GAAIC,EAAG,KACZgE,GAIIxC,EAAa,IAAIsD,EAAKlG,EAAYoF,EAAM,IAGxCgC,EAAuB,CAACD,EAAW1E,EAAWG,GR0D1B,CAAIR,IAC9ByB,EAAc,IAAI5B,EAAYG,IQpD9BiF,CAJ+B,CAC7B,WAAE5E,OAAWG,EAAM4B,YAAaY,KAMlC,IAAIkC,EAAY,EAChB,MAAMC,EAAUC,IAEd,MAAMvD,GAASuD,EAAOF,GAAa,IACnCA,EAAYE,EAGZ3G,EAAI4G,UAAU,EAAG,EAAG7C,EAAO1E,MAAO0E,EAAO7D,QAGzCC,EAAWJ,KAAKC,GAEZgD,EAAY1B,WAEd0B,EAAYjD,KAAKC,GAGjBuG,EAAO7E,SAASmF,IAEdA,EAAM9G,KAAKC,EAAKoD,GAGhByD,EAAMpF,OAAO2B,MAIfJ,EAAYvB,WAGZzB,EAAI8F,KAAO,aACX9F,EAAImC,UAAY,QAChBnC,EAAI+F,SAAQ,eAEV5G,EAAWE,MAAQ,EAAI,GACvBF,EAAWe,OAAS,EAAI,KAK5B8F,OAAOc,sBAAsBJ,IAI/BV,OAAOc,sBAAsBJ,GAG7BR,SAASa,KAAKC,iBAAiB,WAAYC,IACrCjE,EAAY1B,WACdiF,EAAO7E,SAASmF,GAAUA,EAAMvD,gBAAgB2D,EAAM1D","sources":["node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-cd3e48acc7560043.js","node_modules/@parcel/runtime-js/lib/helpers/bundle-url.js","node_modules/@parcel/runtime-js/lib/runtime-7fc66137473b4881.js","src/managers/MapManager.ts","src/utils/numbers-frames.ts","node_modules/@parcel/runtime-js/lib/runtime-0baef99d2b5d4692.js","src/managers/GameManager.ts","src/types/positions.ts","src/actors/Actor.ts","src/actors/Timberman.ts","src/utils/keyboard-map.ts","src/actors/WoodenLog.ts","src/actors/Tree.ts","src/actors/FPSviewer.ts","src/index.ts"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"ct2W2\\\":\\\"index.8ca92d4f.js\\\",\\\"7FnEd\\\":\\\"background.5a8e4b04.png\\\",\\\"6drKZ\\\":\\\"numbers.2a0ad200.png\\\"}\"));","\"use strict\";\n\nvar bundleURL = {};\n\nfunction getBundleURLCached(id) {\n  var value = bundleURL[id];\n\n  if (!value) {\n    value = getBundleURL();\n    bundleURL[id] = value;\n  }\n\n  return value;\n}\n\nfunction getBundleURL() {\n  try {\n    throw new Error();\n  } catch (err) {\n    var matches = ('' + err.stack).match(/(https?|file|ftp):\\/\\/[^)\\n]+/g);\n\n    if (matches) {\n      // The first two stack frames will be this function and getBundleURLCached.\n      // Use the 3rd one, which will be a runtime in the original bundle.\n      return getBaseURL(matches[2]);\n    }\n  }\n\n  return '/';\n}\n\nfunction getBaseURL(url) {\n  return ('' + url).replace(/^((?:https?|file|ftp):\\/\\/.+)\\/[^/]+$/, '$1') + '/';\n} // TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.\n\n\nfunction getOrigin(url) {\n  var matches = ('' + url).match(/(https?|file|ftp):\\/\\/[^/]+/);\n\n  if (!matches) {\n    throw new Error('Origin not found');\n  }\n\n  return matches[0];\n}\n\nexports.getBundleURL = getBundleURLCached;\nexports.getBaseURL = getBaseURL;\nexports.getOrigin = getOrigin;","module.exports = require('./helpers/bundle-url').getBundleURL('ct2W2') + require('./helpers/bundle-manifest').resolve(\"7FnEd\");","import { Size } from '../types/sizes';\n\nconst background = require('../../public/GameResources/img/background.png');\n\nconst getPointsArray = (\n  pointsWidth: number\n): Array<{ start: number; end: number }> => {\n  const pointsHelper: Array<{ start: number; end: number }> = [];\n  let start: number = 0;\n\n  for (let i = 0; i < 5; i++) {\n    const end = start + pointsWidth;\n    pointsHelper.push({ start, end });\n    start += pointsWidth;\n  }\n\n  return pointsHelper;\n};\n\nclass MapManager {\n  canvasSize: Size;\n\n  pointsWidth: number;\n\n  points: Array<{ start: number; end: number }>;\n\n  backgroundImg: HTMLImageElement;\n\n  constructor(canvasSize: Size) {\n    this.canvasSize = canvasSize;\n    this.pointsWidth = canvasSize.width / 5;\n    const pointsHelper: Array<{ start: number; end: number }> = getPointsArray(\n      this.pointsWidth\n    );\n    this.points = pointsHelper;\n\n    this.backgroundImg = new Image();\n    this.backgroundImg.src = background;\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    ctx.drawImage(\n      this.backgroundImg,\n      0,\n      0,\n      this.canvasSize.width,\n      this.canvasSize.height\n    );\n  }\n}\n\n// eslint-disable-next-line import/no-mutable-exports\nexport let mapManager: MapManager;\n\nexport const initMapManager = (\n  canvasSize: Size = { width: 800, height: 900 }\n) => {\n  mapManager = new MapManager(canvasSize);\n};\n","export interface NumberFrame {\n  [key: string]: { x: number; y: number; w: number; h: number };\n}\n\nconst numFrames: NumberFrame = {\n  number00: { x: 5, y: 5, w: 66, h: 91 },\n  number01: { x: 81, y: 5, w: 50, h: 91 },\n  number02: { x: 141, y: 5, w: 66, h: 91 },\n  number03: { x: 217, y: 5, w: 66, h: 91 },\n  number04: { x: 293, y: 5, w: 66, h: 91 },\n  number05: { x: 369, y: 5, w: 66, h: 91 },\n  number06: { x: 445, y: 5, w: 66, h: 91 },\n  number07: { x: 521, y: 5, w: 66, h: 91 },\n  number08: { x: 597, y: 5, w: 66, h: 91 },\n  number09: { x: 673, y: 5, w: 66, h: 91 }\n};\n\nexport default numFrames;\n","module.exports = require('./helpers/bundle-url').getBundleURL('ct2W2') + require('./helpers/bundle-manifest').resolve(\"6drKZ\");","import { Player } from '../types/player';\nimport numFrames from '../utils/numbers-frames';\n\nconst numbers = require('../../public/GameResources/img/numbers.png');\n\nclass GameManager {\n  isPlaying: boolean;\n\n  players: Array<Player>;\n\n  pointsImage: HTMLImageElement;\n\n  constructor(players: Array<Player>) {\n    this.isPlaying = true;\n    this.players = players;\n\n    this.pointsImage = new Image();\n    this.pointsImage.src = numbers;\n  }\n\n  update() {\n    this.players.forEach((player: Player) => {\n      // -- Player arrives at 0 Health\n      if (player.timberman.health <= 0) {\n        this.isPlaying = false;\n        player.timberman.health = 0;\n      }\n\n      // -- Player Collides With Branch\n      if (player.timberman.facing === player.tree.woodenLogs[0].branchFacing) {\n        this.isPlaying = false;\n      }\n    });\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    this.players.forEach((player: Player) => {\n      // #region [ Draw Timberman Health ]\n      ctx.save();\n      ctx.fillStyle = 'orange';\n      ctx.fillRect(\n        player.timberman.healthBarPos.x,\n        player.timberman.healthBarPos.y,\n        player.timberman.health,\n        player.timberman.healthBarSize.height\n      );\n      ctx.restore();\n      // #endregion\n\n      // #region [ Draw Timberman Points ]\n      const strPoints: string[] = player.timberman.points.toString().split('');\n      if (strPoints.length === 1) {\n        const curNumber: { x: number; y: number; w: number; h: number } =\n          numFrames[`number0${player.timberman.points.toString()}`];\n\n        ctx.drawImage(\n          this.pointsImage,\n          curNumber.x,\n          curNumber.y,\n          curNumber.w,\n          curNumber.h,\n          player.timberman.pointsPosition.x,\n          player.timberman.pointsPosition.y,\n          player.timberman.pointsSize.width,\n          player.timberman.pointsSize.height\n        );\n      } else {\n        strPoints.forEach((e, index) => {\n          const curNumber: { x: number; y: number; w: number; h: number } =\n            numFrames[`number0${e}`];\n\n          ctx.drawImage(\n            this.pointsImage,\n            curNumber.x,\n            curNumber.y,\n            curNumber.w,\n            curNumber.h,\n            player.timberman.pointsPosition.x +\n              index * player.timberman.pointsSize.width,\n            player.timberman.pointsPosition.y,\n            player.timberman.pointsSize.width,\n            player.timberman.pointsSize.height\n          );\n        });\n      }\n      // #endregion\n    });\n  }\n}\n\n// eslint-disable-next-line import/no-mutable-exports\nexport let gameManager: GameManager;\n\nexport const initGameManager = (players: Array<Player>) => {\n  gameManager = new GameManager(players);\n};\n","export interface Position {\n  x: number;\n  y: number;\n}\n\nexport enum facingENUM {\n  // eslint-disable-next-line no-unused-vars\n  LEFT,\n  // eslint-disable-next-line no-unused-vars\n  RIGHT,\n  // eslint-disable-next-line no-unused-vars\n  NONE\n}\n","/* eslint-disable no-unused-vars */\n/* eslint-disable class-methods-use-this */\n\nclass Actor {\n  update(delta: number): void {}\n\n  draw(ctx: CanvasRenderingContext2D, delta: number): void {}\n\n  handleInputDOWN(key: string): void {}\n}\n\nexport default Actor;\n","import { mapManager } from '../managers/MapManager';\nimport { Position, facingENUM } from '../types/positions';\nimport { Size } from '../types/sizes';\nimport { KeyboardMap } from '../utils/keyboard-map';\nimport Actor from './Actor';\n\nconst HEALTH_DECRESEASE_SPEED: number = 16;\nconst HEALTH_INCRESEASE_SPEED: number = 12;\n\nconst createPositionsTM = (canvas: Size, tmSize: Size): Array<Position> => {\n  // -- Left Point\n  let middlePosPoint = mapManager.points[1].start + mapManager.pointsWidth / 2;\n  const tmPosLeft: Position = {\n    x: middlePosPoint - tmSize.width / 2,\n    y: canvas.height - 150\n  };\n\n  // -- Right Point\n  middlePosPoint = mapManager.points[3].start + mapManager.pointsWidth / 2;\n  const tmPosRight: Position = {\n    x: middlePosPoint - tmSize.width / 2,\n    y: canvas.height - 150\n  };\n\n  return [tmPosLeft, tmPosRight];\n};\n\nclass Timberman extends Actor {\n  tmSize: Size;\n\n  positions: Array<Position>;\n\n  facing: facingENUM;\n\n  keyboardMap: KeyboardMap;\n\n  health: number;\n\n  points: number;\n\n  healthBarPos: Position;\n\n  healthBarSize: Size;\n\n  pointsPosition: Position;\n\n  pointsSize: Size;\n\n  constructor(\n    canvasSize: Size,\n    healthPos: Position,\n    pointsPos: Position,\n    keyboardMap: KeyboardMap\n  ) {\n    super();\n    this.tmSize = { width: 100, height: 100 };\n    this.positions = createPositionsTM(canvasSize, this.tmSize);\n    this.facing = facingENUM.RIGHT;\n    this.keyboardMap = keyboardMap;\n    this.health = 100;\n    this.points = 0;\n    this.healthBarPos = healthPos;\n    this.healthBarSize = { width: this.health, height: 30 };\n    this.pointsPosition = pointsPos;\n    this.pointsSize = { width: 30, height: 40 };\n  }\n\n  update(delta: number) {\n    if (this.health > 100) this.health = 100;\n    if (this.health < 0) this.health = 0;\n\n    this.health -= HEALTH_DECRESEASE_SPEED * delta;\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    const curPosition: Position =\n      this.facing === facingENUM.LEFT ? this.positions[0] : this.positions[1];\n\n    ctx.save();\n\n    ctx.fillStyle = 'red';\n\n    ctx.fillRect(\n      curPosition.x,\n      curPosition.y,\n      this.tmSize.width,\n      this.tmSize.height\n    );\n\n    ctx.restore();\n  }\n\n  handleInputDOWN(key: string) {\n    const input = this.keyboardMap[key];\n\n    if (input === facingENUM.LEFT) {\n      this.facing = facingENUM.LEFT;\n      this.health += HEALTH_INCRESEASE_SPEED * 0.2;\n      this.points++;\n    }\n\n    if (input === facingENUM.RIGHT) {\n      this.facing = facingENUM.RIGHT;\n      this.health += HEALTH_INCRESEASE_SPEED * 0.2;\n      this.points++;\n    }\n  }\n}\n\nexport default Timberman;\n","import { facingENUM } from '../types/positions';\n\nexport interface KeyboardMap {\n  [key: string]: facingENUM;\n}\n\nexport const mapA: KeyboardMap = {\n  ArrowLeft: facingENUM.LEFT,\n  ArrowRight: facingENUM.RIGHT\n};\n\nexport const mapB: KeyboardMap = {\n  a: facingENUM.LEFT,\n  A: facingENUM.LEFT,\n  d: facingENUM.RIGHT,\n  D: facingENUM.RIGHT\n};\n","import { Position, facingENUM } from '../types/positions';\nimport { Size } from '../types/sizes';\n\nclass WoodenLog {\n  position: Position;\n\n  branchFacing: facingENUM;\n\n  wlSize: Size;\n\n  branchSize: Size;\n\n  constructor(position: Position, wlSize: Size, firstLog: boolean = false) {\n    this.position = position;\n    this.wlSize = wlSize;\n\n    if (firstLog) {\n      this.branchFacing = facingENUM.LEFT;\n    } else {\n      const rand = Math.floor(Math.random() * 3) + 1;\n      if (rand === 1) this.branchFacing = facingENUM.LEFT;\n      else if (rand === 2) this.branchFacing = facingENUM.RIGHT;\n      else this.branchFacing = facingENUM.NONE;\n    }\n    this.branchSize = { width: 100, height: 30 };\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    // -- Render Wooden Log\n    ctx.save();\n    ctx.fillStyle = 'blue';\n    ctx.fillRect(\n      this.position.x,\n      this.position.y,\n      this.wlSize.width,\n      this.wlSize.height\n    );\n    ctx.restore();\n\n    // -- Render branchFacing\n    if (this.branchFacing !== facingENUM.NONE) {\n      ctx.save();\n      ctx.fillStyle = 'green';\n\n      const branchPos: number =\n        this.branchFacing === facingENUM.LEFT\n          ? this.position.x - this.branchSize.width\n          : this.position.x + this.branchSize.width;\n      ctx.fillRect(\n        branchPos,\n        this.position.y,\n        this.branchSize.width,\n        this.branchSize.height\n      );\n      ctx.restore();\n    }\n  }\n}\n\nexport default WoodenLog;\n","import { mapManager } from '../managers/MapManager';\nimport { facingENUM, Position } from '../types/positions';\nimport { Size } from '../types/sizes';\nimport { KeyboardMap } from '../utils/keyboard-map';\nimport Actor from './Actor';\nimport WoodenLog from './WoodenLog';\n\nconst createWoodenLogs = (\n  canvas: Size,\n  numLogs: number = 10\n): Array<WoodenLog> => {\n  const tree: Array<WoodenLog> = [];\n\n  for (let i = 0; i < numLogs; i++) {\n    const wlSize: Size = { width: 100, height: 100 };\n\n    const middlePosPoint =\n      mapManager.points[2].start + mapManager.pointsWidth / 2;\n\n    const wlPos: Position = {\n      x: middlePosPoint - wlSize.width / 2,\n      y: canvas.height - 150 - i * 105\n    };\n\n    tree.push(new WoodenLog(wlPos, wlSize, i === 0));\n  }\n\n  return tree;\n};\n\nclass Tree extends Actor {\n  woodenLogs: Array<WoodenLog>;\n\n  keyboardMap: KeyboardMap;\n\n  constructor(canvas: Size, keyboardMap: KeyboardMap, numLogs: number = 10) {\n    super();\n    this.woodenLogs = createWoodenLogs(canvas, numLogs);\n    this.keyboardMap = keyboardMap;\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    this.woodenLogs.forEach((e) => e.draw(ctx));\n  }\n\n  handleInputDOWN(key: string) {\n    const input = this.keyboardMap[key];\n\n    if (input === facingENUM.LEFT || input === facingENUM.RIGHT) {\n      // -- Remove First Element\n      this.woodenLogs.shift();\n\n      // -- Move all the [ Wooden Log ] Positions\n      this.woodenLogs.forEach((wl) => {\n        wl.position.y += wl.wlSize.height + 5;\n      });\n\n      // -- Add new [ Wooden Log ] to the tree at the last position\n      const wlSize: Size = { width: 100, height: 100 };\n\n      const middlePosPoint =\n        mapManager.points[2].start + mapManager.pointsWidth / 2;\n\n      const wlPos: Position = {\n        x: middlePosPoint - wlSize.width / 2,\n        y: mapManager.canvasSize.height - 150 - 9 * 105\n      };\n\n      this.woodenLogs.push(new WoodenLog(wlPos, wlSize));\n    }\n  }\n}\n\nexport default Tree;\n","import { Position } from '../types/positions';\nimport Actor from './Actor';\n\nclass FPSViewer extends Actor {\n  position: Position;\n\n  constructor(position: Position) {\n    super();\n    this.position = position;\n  }\n\n  draw(ctx: CanvasRenderingContext2D, delta: number) {\n    const fps = (1 / delta).toFixed(2);\n    ctx.font = '15px Arial';\n    ctx.fillStyle = 'black';\n    ctx.fillText(`FPS:${fps}`, this.position.x, this.position.y);\n  }\n}\n\nexport default FPSViewer;\n","import { mapManager, initMapManager } from './managers/MapManager';\nimport { gameManager, initGameManager } from './managers/GameManager';\nimport Timberman from './actors/Timberman';\nimport { mapA } from './utils/keyboard-map';\nimport Tree from './actors/Tree';\nimport { Size } from './types/sizes';\nimport Actor from './actors/Actor';\nimport { Player } from './types/player';\nimport FPSViewer from './actors/FPSviewer';\n\nwindow.onload = () => {\n  const canvas = document.getElementById('canvas-game') as HTMLCanvasElement;\n  const ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n  const canvasSize: Size = { width: canvas.width, height: canvas.height };\n\n  // [ Init Managers ]\n  initMapManager(canvasSize);\n\n  // #region [ Init Actors ]\n\n  // -- FPS Viewer\n  const FPSviewer: FPSViewer = new FPSViewer({ x: 50, y: 50 });\n\n  // -- Timberman\n  const timberman: Timberman = new Timberman(\n    canvasSize,\n    { x: 50, y: 100 },\n    { x: 50, y: 145 },\n    mapA\n  );\n\n  // -- Wooden Tree\n  const tree: Tree = new Tree(canvasSize, mapA, 10);\n  // #endregion\n\n  const actors: Array<Actor> = [FPSviewer, timberman, tree];\n\n  // [ Init Game Manager ]\n  const players: Array<Player> = [\n    { timberman, tree, keyboardMap: mapA }\n    // { timberman2, tree2, keyboardMap: mapB }, // -- In case you want to add another player\n  ];\n  initGameManager(players);\n\n  // -- Render Loop\n  let lastFrame = 0;\n  const render = (time: number): void => {\n    // -- Get Delta\n    const delta = (time - lastFrame) / 1000;\n    lastFrame = time;\n\n    // -- Clear the canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // -- Draw Background\n    mapManager.draw(ctx);\n\n    if (gameManager.isPlaying) {\n      // -- Draw Actors Info\n      gameManager.draw(ctx);\n\n      // -- Actors Actions\n      actors.forEach((actor) => {\n        // -- Draw Section\n        actor.draw(ctx, delta);\n\n        // -- Update Player Health\n        actor.update(delta);\n      });\n\n      // -- Check players positions\n      gameManager.update();\n    } else {\n      // -- Game Over Message\n      ctx.font = '15px Arial';\n      ctx.fillStyle = 'black';\n      ctx.fillText(\n        `Game Over...`,\n        canvasSize.width / 2 - 50,\n        canvasSize.height / 2 - 25\n      );\n    }\n\n    // -- Recurisve\n    window.requestAnimationFrame(render);\n  };\n\n  // -- Start the game\n  window.requestAnimationFrame(render);\n\n  // -- Add Event Listeners\n  document.body.addEventListener('keydown', (event) => {\n    if (gameManager.isPlaying) {\n      actors.forEach((actor) => actor.handleInputDOWN(event.key));\n    }\n  });\n};\n"],"names":["$8b4d1930797b255e$export$6503ec6e8aabbaf","$8b4d1930797b255e$export$f7ad0328861e2f03","$8b4d1930797b255e$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","parcelRequire","register","JSON","parse","$f29cd6c67ea13581$export$bdfd709ae4826697","$f29cd6c67ea13581$var$bundleURL","$f29cd6c67ea13581$var$getBaseURL","url","replace","value","err","matches","stack","match","$f29cd6c67ea13581$var$getBundleURL","$591730b6a5fd8289$exports","getBundleURL","resolve","$b76e4b56ecbb8faf$var$MapManager","canvasSize1","this","canvasSize","pointsWidth","width","pointsHelper","start","end","push","$b76e4b56ecbb8faf$var$getPointsArray","points","backgroundImg","Image","src","draw","ctx","drawImage","height","$b76e4b56ecbb8faf$export$fef8b6f15112b2ca","$bdfd4ec0ff3277d0$export$2e2bcd8739ae039","number00","x","y","w","h","number01","number02","number03","number04","number05","number06","number07","number08","number09","$cca09e8689b00f37$exports","$ef5e44257fdce7da$var$GameManager","players1","isPlaying","players","pointsImage","update","forEach","player","timberman","health","facing","tree","woodenLogs","branchFacing","save","fillStyle","fillRect","healthBarPos","healthBarSize","restore","strPoints","toString","split","curNumber","pointsPosition","pointsSize","e","index","$ef5e44257fdce7da$export$ab06c38123110f1f","facingENUM","$a6845bf1f59e284a$export$7ce44a5e993f42ea","$8235678231353d24$export$2e2bcd8739ae039","delta","delta1","handleInputDOWN","key","$8aa3bd67dcb811a8$export$2e2bcd8739ae039","healthPos","pointsPos","keyboardMap","super","tmSize","positions","canvas","middlePosPoint","tmPosLeft","$8aa3bd67dcb811a8$var$createPositionsTM","RIGHT","curPosition","LEFT","input","$6f5fc56be7ebde6b$export$b876a215b1634849","ArrowLeft","ArrowRight","$0221a8df29792366$export$2e2bcd8739ae039","position","wlSize","firstLog","rand","Math","floor","random","NONE","branchSize","branchPos","$ee9bfff312bfbe00$export$2e2bcd8739ae039","numLogs","wlPos","$ee9bfff312bfbe00$var$createWoodenLogs","shift","wl","$686b1df20744f34f$export$2e2bcd8739ae039","fps","toFixed","font","fillText","window","onload","document","getElementById","getContext","$b76e4b56ecbb8faf$export$5b9231e05761732a","FPSviewer","actors","$ef5e44257fdce7da$export$59c269ab1c60136c","lastFrame","render","time","clearRect","actor","requestAnimationFrame","body","addEventListener","event"],"version":3,"file":"index.8ca92d4f.js.map"}